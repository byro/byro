name: CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  style-isort:
    name: "[Style] isort"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: python -m pip install -Ue "src[dev]"
      - name: Run isort
        run: isort -c .
        working-directory: ./src

  style-flake8:
    name: "[Style] flake8"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: python -m pip install -Ue "src[dev]"
      - name: Run flake8
        run: flake8 .
        working-directory: ./src

  style-black:
    name: "[Style] black"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: python -m pip install -Ue "src[dev]"
      - name: Run black
        run: black --check .
        working-directory: ./src

  style-djhtml:
    name: "[Style] DjHTML"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: python -m pip install -Ue "src[dev]"
      - name: Run djhtml
        run: djhtml byro/
        working-directory: ./src

  testing:
    runs-on: ubuntu-latest
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9, '3.10', 3.11 ]
        database: [ sqlite, postgres, mysql ]
        exclude:
          - database: mysql
            python-version: 3.9
          - database: mysql
            python-version: 3.11
          - database: sqlite
            python-version: 3.9
          - database: sqlite
            python-version: 3.11
    steps:
      - uses: actions/checkout@v4
      - uses: getong/mariadb-action@v1.2
        with:
          mariadb version: '10.7'
          mysql database: 'byro'
          mysql root password: ''
        if: matrix.database == 'mysql'
      - uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '14'
          postgresql db: 'byro'
          postgresql user: 'postgres'
          postgresql password: 'postgres'
        if: matrix.database == 'postgres'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gettext
      - name: Install system dependencies for mysql
        run: sudo apt update && sudo apt install mariadb-client-10.6
        if: matrix.database == 'mysql'
      - name: Install Python dependencies
        run: python -m pip install -Ue "src[dev]"
      - name: Install MySQL dependencies
        run: python -m pip install -Ue "src[mysql]"
        if: matrix.database == 'mysql'
      - name: Install Postgres dependencies
        run: python -m pip install -Ue "src[postgres]"
        if: matrix.database == 'postgres'
      - name: Run checks
        run: python manage.py check --deploy
        working-directory: ./src
      - name: Compile locales
        run: python manage.py compilemessages
        working-directory: ./src
      - name: Run tests
        working-directory: ./src
        run: python -m pytest --reruns=3 -nauto -p no:sugar --cov=./ --cov-report=xml --maxfail=100 tests
        env:
          BYRO_CONFIG_FILE: 'tests/byro.${{ matrix.database }}.cfg'
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: src/coverage.xml
          fail_ci_if_error: true
        if: matrix.database == 'postgres' && matrix.python-version == '3.10'

  build-python-package:
    name: 🔨 Build python package
    needs:
      - style-isort
      - style-flake8
      - style-black
      - style-djhtml
      - testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: 🏗 Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: 🏗 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gettext
      - name: 🏗 Install Dependencies
        run: python -m pip install twine wheel -Ue "src[dev]"
      - name: 🏗 Set byro version
        run: sed -i 's/__version__.*/__version__ = "${{ github.event.release.tag_name }}"/' byro/__init__.py
        if: github.event_name == 'release' && github.event.action == 'published'
        working-directory: ./src
      - name: 🔎 Check manifest
        run: check-manifest .
        working-directory: ./src
      - name: 🔨Build package
        run: |
          python -m build -nw
          python -m build -ns
        working-directory: ./src
      - name: 🔎 Check package
        run: twine check dist/*
        working-directory: ./src
      - name: ⬆ Upload build result
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: src/dist

  pypi-publish:
    name: ⬆ Upload release to PyPI
    needs: build-python-package
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/byro
    permissions:
      id-token: write
    steps:
      - name: ⬇ Download build result
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: 📦 Publish to index
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

  build-docker-image:
    name: 🔨 Build docker image
    needs: build-python-package
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout
        uses: actions/checkout@v4
      - name: 🏗 Set byro version
        run: sed -i 's/__version__.*/__version__ = "${{ github.event.release.tag_name }}"/' byro/__init__.py
        if: github.event_name == 'release' && github.event.action == 'published'
        working-directory: ./src
      - name: 🏗 Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: 🏗 Setup Docker buildx
        uses: docker/setup-buildx-action@v3
      - name: 🏗 Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: 🏗 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: src
          platforms: linux/amd64
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: 🔎 Inspect Docker image
        if: false
        run: docker image inspect ${{ steps.meta.outputs.tags }}

  push-docker-image:
    name: 🔨 Push Docker image to GitHub Packages
    needs: build-docker-image
    if: github.event_name == 'push' || (github.event_name == 'release' && github.event.action == 'published')
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: 🏗 Checkout
        uses: actions/checkout@v4
      - name: 🏗 Set byro version
        run: sed -i 's/__version__.*/__version__ = "${{ github.event.release.tag_name }}"/' src/byro/__init__.py
        if: github.event_name == 'release' && github.event.action == 'published'
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: 🏗 Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 🏗 Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: 🏗 Build container image
        uses: docker/build-push-action@v5
        with:
          context: src
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
